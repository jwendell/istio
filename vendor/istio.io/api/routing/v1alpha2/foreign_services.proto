// Copyright 2018 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

import "routing/v1alpha2/gateway.proto";

package istio.routing.v1alpha2;

// Service registry entries describe describe the endpoints, ports and
// protocols of a white-listed set of mesh-external domains and IP blocks
// that services in the mesh are allowed to access.
//
// NOTE 1: If a foreign service has the same name as a service in the
// service registry, the foreign service's declaration will be given
// precedence.
//
// NOTE 2: There can be ONLY ONE ForeignServices configuration for the
// entire mesh.
//
// For example, the following foreign services configuration describes the
// set of services at https://example.com. Eventhough the services behind
// example.com have to be accessed via HTTPS, in order for the application to
// obtain metrics from Istio, a plain text port (HTTP over port 80) is
// declared in addition to a secure port (HTTPS over 443). Connections
// arriving at port 443 on the sidecar will be treated as opaque TCP
// connections and will be forwarded as is to the destination, with limited
// visibility into the application flow. Connections arriving on port 80 on
// the sidecar will be able to take advantage of Istio's advanced routing
// and policy enforcement features. The associated routing rule ensures
// that outbound connections from the sidecar to the destination service
// happen over HTTPS.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: ForeignServices
//     metadata:
//       name: foreign-svc
//     spec:
//       services:
//       - hosts:
//         - example.com
//         ports:
//         - number: 443
//           name: https
//           protocol: HTTPS #treated as opaque TCP
//         - number: 80
//           name: http
//           protocol: HTTP
//         discovery: none
//
// And the associated route rule
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: my-foreign-rule
//     spec:
//       hosts:
//       - example.com
//       http:
//       - match:
//         - port:
//             name: http
//         route:
//         - destination:
//             name: example.com
//             port:
//               name: https
//
// Route rules can also be applied to services described in the
// ForeignServices resource. The following sample route rule rewrites
// /foocatalog to /barcatalog before forwarding the call to the intended
// destination.
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: RouteRule
//     metadata:
//       name: foo-rule
//     spec:
//       hosts:
//       - example.com
//       http:
//       - match:
//         - uri:
//             prefix: /foocatalog
//         rewrite:
//           uri: /barcatalog
//
message ForeignServices {
  // REQUIRED: A list of server specifications.
  repeated Service services = 1;
}

// Service describes the endpoints, ports and protocols of the external
// service to be made accessible from within the mesh. For example,
//
//     apiVersion: config.istio.io/v1alpha2
//     kind: ForeignServices
//     metadata:
//       name: foreign-svc
//     spec:
//       services:
//       - hosts:
//         - *.foo.com
//         ports:
//         - number: 80
//           protocol: HTTP2
//           name: http2
//         resolution: none
//       - hosts:
//         - 192.192.33.33/16
//         ports:
//         - number: 27018
//           protocol: MONGO
//           name: mongo
//         resolution: none
//
message Service {
  // REQUIRED. The hosts associated with the external service. Could be a
  // DNS name with wildcard prefix or a CIDR prefix. Note that the hosts
  // field applies to all protocols.
  repeated string hosts = 1;

  // REQUIRED: The Ports associated with the external services.
  repeated Port ports = 2;

  // Different ways of discovering the IP addresses associated with the
  // service.
  enum Discovery {
    // If set to "none", the proxy will assume that incoming connections
    // have already been resolved (to a specific destination IP
    // address). Such connections are typically routed via the proxy using
    // mechanisms such as IP table REDIRECT/ eBPF. After performing any
    // routing related transformations, the proxy will forward the
    // connection to the IP address to which the connection was bound.
    NONE = 0;

    // If set to "static", the proxy will use specified endpoints (See
    // below) as the backing nodes associated with the foreign service.
    STATIC = 1;

    // If set to "dns", the proxy will attempt to resolve the DNS
    // address during request processing. Use this mode if the set of
    // resolved addresses change dynamically. The "dns" mode is applicable
    // only when the hosts use exact DNS names without any wildcards.
    DNS = 2;
  };

  // Service discovery mode for the hosts.
  Discovery resolution = 3;

  // Endpoint defines a network address (IP:port or hostname:port)
  // associated with the foreign service.
  message Endpoint {
    // REQUIRED: Address associated with the network endpoint ( IP or fully
    // qualified domain name without wildcards).
    string address = 1;

    // The port on which the endpoint is listening for network connections.
    Port port = 2;

    // One or more labels associated with the endpoint.
    map<string, string> labels = 3;
  };

  // One or more endpoints associated with the service. Endpoints are valid
  // only when the discovery mode is set to "static".
  repeated Endpoint endpoints = 4;
}
